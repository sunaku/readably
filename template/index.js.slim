ruby:
  require 'json'

  # construct a relative navigation chain for all entries on index page
  chain_by_entry_id = Hash.new {|h,k| h[k] = {} }
  relation = lambda {|entry, keys| Hash[keys.zip(entry.values_at(*keys))] }
  keys = [:url, 'title']
  listed_entries.each_cons(2) do |preceding, following|
    chain_by_entry_id[preceding[:id]][:following] = relation[following, keys]
    chain_by_entry_id[following[:id]][:preceding] = relation[preceding, keys]
  end

erb:
  $(function() {
    // create links to preceding and following entries in navigation chain
    var chain_by_entry_id = <%== chain_by_entry_id.to_json %>;
    var entry_id = $('#body').data('entry-id');
    if (entry_id) {
      var chain = chain_by_entry_id[entry_id];
      if (chain) {
        // element to surround with navigation links
        var $target = $('article > header > a.index');

        var preceding = chain.preceding;
        if (preceding) {
          $target.before($('<a>').
            attr('class', 'navigation').
            attr('href', preceding.url).
            attr('title', preceding.title));
        }

        var following = chain.following;
        if (following) {
          $target.after($('<a>').
            attr('class', 'navigation').
            attr('href', following.url).
            attr('title', following.title));
        }
      }
    }

    // create table of contents which links to headings that already have IDs
    var toc_list_type = 'ol';
    var $targets = $('#body [id]');
    if ($targets.length > 0) {
      var $root = $('<'+ toc_list_type +'>').attr('class', 'table-of-contents');
      var $head = $root;
      var level = 0;
      $targets.each(function() {
        var matches = this.tagName.match(/^H([1-6])$/i); // filter for headings
        if (matches) {
          var next_level = parseInt(matches[1]);
          if (next_level > level) {
            var $next_root = $('<'+ toc_list_type +'>');
            var $next_head = $('<li>');
            $next_root.append($next_head);
            $head.append($next_root);
            $head = $next_head;
          }
          else if (next_level < level) {
            // rewind the stack to reach higher level
            for (var i = level; i > next_level; i--) {
              var $ancestor = $head.parent().parent();
              if ($ancestor.get(0) === $root.get(0)) {
                break;
              }
              $head = $ancestor;
            }
            var $next_head = $('<li>');
            $head.after($next_head);
            $head = $next_head;
          }
          else if ($head.children().length > 0) {
            var $next_head = $('<li>');
            $head.after($next_head);
            $head = $next_head;
          }
          level = next_level;

          var $target = $(this);
          var $link = $('<a>').text($target.text()).
            attr('href', '#' + $target.attr('id'));
          $head.append($link);
        }
      });
      if (level > 0) {
        $('#body > .content').prepend($root);
      }
    }

    // make alternate texts on images appear as tooltip labels on mouse-over
    $('img[alt]:not([title])').each(function() {
      $(this).attr('title', $(this).attr('alt'));
    });

    // add fullscreen zooming and panning capabilites to images when clicked
    $('img[alt]:not([data-title])').each(function() {
      $(this).attr('data-title', $(this).attr('alt'));
    });
    $('img:not([data-caption])').each(function() {
      $(this).attr('data-caption', $(this).attr('src').replace(/.*\//g, ''));
    });
    var $zoomable = $('img').not('a img');
    if ($zoomable.length > 0) Intense( $zoomable );

    // filter entries on index page based on user input in the search box
    var $entries = $('nav.entries > ul > li');
    var $headings = $('nav.entries > h2');
    $('article > header > form.search > input[type=search]').on(
      'keyup change focus blur search', function(event) {
        var input = event.target.value;
        if (input.match(/\S/)) {
          var words = input.replace(/^\s+|\s+$/g, '').split(/\s+/g);
          var regexp = new RegExp(words.join('|'), 'ig');
          $headings.hide();
          $entries.each(function() {
            var $entry = $(this);
            if (regexp.test($entry.text())) {
              $entry.show();
              $entry.parent('ul').prev('h2').show();
            }
            else {
              $entry.hide();
            }
          });
        }
        else {
          $entries.show();
          $headings.show();
        }
      }
    );
  });
