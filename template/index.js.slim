ruby:
  require 'json'

  # construct a relative navigation chain for all entries on index page
  chain_by_entry_id = Hash.new {|h,k| h[k] = {} }
  relation = lambda {|entry, keys| Hash[keys.zip(entry.values_at(*keys))] }
  keys = [:url, 'title']
  listed_entries.each_cons(2) do |preceding, following|
    chain_by_entry_id[preceding[:id]][:following] = relation[following, keys]
    chain_by_entry_id[following[:id]][:preceding] = relation[preceding, keys]
  end

  javascript = <<END_OF_JAVASCRIPT
  $(function() {
    // create links to preceding and following entries in navigation chain
    var chain_by_entry_id = #{chain_by_entry_id.to_json};
    var entry_id = $('#body').data('entry-id');
    if (entry_id) {
      var chain = chain_by_entry_id[entry_id];
      if (chain) {
        // element to surround with navigation links
        var $target = $('article > header .navigation > a.rootlink');

        var preceding = chain.preceding;
        $target.before($('<a>').
          attr('class', 'prevlink').
          attr('href', preceding && preceding.url).
          attr('title', preceding && preceding.title));

        var following = chain.following;
        $target.after($('<a>').
          attr('class', 'nextlink').
          attr('href', following && following.url).
          attr('title', following && following.title));
      }
    }

    // make alternate texts on images appear as tooltip labels on mouse-over
    $('img[alt]:not([title])').each(function() {
      $(this).attr('title', $(this).attr('alt'));
    });

    // filter entries on index page based on user input in the search box
    var $entries = $('nav.entries > ul > li');
    var $headings = $('nav.entries > h2');
    $('article > header > form.search > input[type=search]').on(
      'keyup change focus blur search', function(event) {
        var input = event.target.value;
        if (input.match(/\\S/)) {
          var words = input.replace(/^\\s+|\\s+$/g, '').split(/\\s+/g);
          var regexp = new RegExp(words.join('|'), 'ig');
          $headings.hide();
          $entries.each(function() {
            var $entry = $(this);
            if (regexp.test($entry.text())) {
              $entry.show();
              $entry.parent('ul').prev('h2').show();
            }
            else {
              $entry.hide();
            }
          });
        }
        else {
          $entries.show();
          $headings.show();
        }
      }
    );

    // replace embedded YouTube video thumbnail links with <iframe>s on click
    $('a.embed_youtube_video').on('click', function() {
      var hyperlink = $(this);
      var thumbnail = $('img', hyperlink);
      var iframe = $('<iframe allowfullscreen></iframe>');
      iframe.attr('src', hyperlink.attr('href'));
      iframe.attr('width', thumbnail.width());
      iframe.attr('height', thumbnail.height());
      iframe.attr('frameborder', 0);
      hyperlink.replaceWith(iframe);
      return false;
    });
  });
  END_OF_JAVASCRIPT

== javascript
